{
  "address": "0xC00d068ce320Ec8e0b5Cb36e8b48d491F9D2B328",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__InsufficientAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__WithdrawError",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3702c735270793f59bb1bb9ba20cb483b3f2b3cb7bdac81d295f3df53e42e32b",
  "receipt": {
    "to": null,
    "from": "0xF11046328814004583c8e74050f0d59520f53e90",
    "contractAddress": "0xC00d068ce320Ec8e0b5Cb36e8b48d491F9D2B328",
    "transactionIndex": 4,
    "gasUsed": "834684",
    "logsBloom": "0x
    "blockHash": "0x00b4c7784aec077f3cd4708367e479f6cb1b14a7a59cd5b5db9e68d935561072",
    "transactionHash": "0x3702c735270793f59bb1bb9ba20cb483b3f2b3cb7bdac81d295f3df53e42e32b",
    "logs": [],
    "blockNumber": 3514679,
    "cumulativeGasUsed": "1437071",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 2,
  "solcInputHash": "118587d43679729eb2e0b97629466a17",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__WithdrawError\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Boris Kolev\",\"details\":\"This implements price feeds as a library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as a library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds the contract\"}},\"notice\":\"This contract is to demo a sample fund me contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8; // If we put ^ it will take everything above as well; we can use >= <= as well\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\nerror FundMe__InsufficientAmount();\\nerror FundMe__WithdrawError();\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Boris Kolev\\n * @notice This contract is to demo a sample fund me contract\\n * @dev This implements price feeds as a library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        // equire(msg.sender == i_owner, \\\"Sender is not owner!\\\");\\n        _; // run the rest of the funciton\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice This function funds the contract\\n     * @dev This implements price feeds as a library\\n     */\\n    function fund() public payable {\\n        if (msg.value.getConversionRate(s_priceFeed) < MINIMUM_USD) {\\n            revert FundMe__InsufficientAmount();\\n        }\\n        // require(msg.value.getConversionRate() > MINIMUM_USD, \\\"Did not send enough money!\\\");\\n        s_funders.push(msg.sender); // Add all funders to our contract\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n\\n        if (!callSuccess) {\\n            revert FundMe__WithdrawError();\\n        }\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x1c69a9655581e58a5ff1708db22c16e9d8c69fd8420d697fc577dc1205c6d949\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8; // If we put ^ it will take everything above as well; we can use >= <= as well\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xd5ffa64c5638c44563c78fb3fdd266930d0acb16e14f615f0a615c8c5ddb7460\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f1a380380610f1a83398181016040528101906100329190610113565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e0826100b5565b9050919050565b6100f0816100d5565b81146100fb57600080fd5b50565b60008151905061010d816100e7565b92915050565b600060208284031215610129576101286100b0565b5b6000610137848285016100fe565b91505092915050565b60805160601c610db56101656000396000818161030701526105b10152610db56000f3fe6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e8146100ff5780639e87a5cd1461012a578063b60d428814610155578063d7b4750c1461015f57610083565b80630343fb251461008d5780633ccfd60b146100ca5780636b69a592146100d457610083565b366100835761008161019c565b005b61008b61019c565b005b34801561009957600080fd5b506100b460048036038101906100af919061082c565b6102bc565b6040516100c19190610872565b60405180910390f35b6100d2610305565b005b3480156100e057600080fd5b506100e96105a0565b6040516100f69190610872565b60405180910390f35b34801561010b57600080fd5b506101146105ad565b604051610121919061089c565b60405180910390f35b34801561013657600080fd5b5061013f6105d5565b60405161014c9190610916565b60405180910390f35b61015d61019c565b005b34801561016b57600080fd5b506101866004803603810190610181919061095d565b6105ff565b604051610193919061089c565b60405180910390f35b6802b5e3af16b18800006101db600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461064690919063ffffffff16565b1015610213576040517f7f20846900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561040d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103c3575b5050505050905060005b81518110156104985760008282815181106104355761043461098a565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610490906109e8565b915050610417565b50600067ffffffffffffffff8111156104b4576104b3610a31565b5b6040519080825280602002602001820160405280156104e25781602001602082028036833780820191505090505b50600090805190602001906104f8929190610722565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161051f90610a91565b60006040518083038185875af1925050503d806000811461055c576040519150601f19603f3d011682016040523d82523d6000602084013e610561565b606091505b505090508061059c576040517fdde7200a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008082815481106106145761061361098a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061065283610682565b90506000670de0b6b3a7640000858361066b9190610aa6565b6106759190610b2f565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106cb57600080fd5b505afa1580156106df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107039190610bed565b5050509150506402540be4008161071a9190610c68565b915050919050565b82805482825590600052602060002090810192821561079b579160200282015b8281111561079a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610742565b5b5090506107a891906107ac565b5090565b5b808211156107c55760008160009055506001016107ad565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107f9826107ce565b9050919050565b610809816107ee565b811461081457600080fd5b50565b60008135905061082681610800565b92915050565b600060208284031215610842576108416107c9565b5b600061085084828501610817565b91505092915050565b6000819050919050565b61086c81610859565b82525050565b60006020820190506108876000830184610863565b92915050565b610896816107ee565b82525050565b60006020820190506108b1600083018461088d565b92915050565b6000819050919050565b60006108dc6108d76108d2846107ce565b6108b7565b6107ce565b9050919050565b60006108ee826108c1565b9050919050565b6000610900826108e3565b9050919050565b610910816108f5565b82525050565b600060208201905061092b6000830184610907565b92915050565b61093a81610859565b811461094557600080fd5b50565b60008135905061095781610931565b92915050565b600060208284031215610973576109726107c9565b5b600061098184828501610948565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109f382610859565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a2657610a256109b9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a7b600083610a60565b9150610a8682610a6b565b600082019050919050565b6000610a9c82610a6e565b9150819050919050565b6000610ab182610859565b9150610abc83610859565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610af557610af46109b9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b3a82610859565b9150610b4583610859565b925082610b5557610b54610b00565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b7f81610b60565b8114610b8a57600080fd5b50565b600081519050610b9c81610b76565b92915050565b6000819050919050565b610bb581610ba2565b8114610bc057600080fd5b50565b600081519050610bd281610bac565b92915050565b600081519050610be781610931565b92915050565b600080600080600060a08688031215610c0957610c086107c9565b5b6000610c1788828901610b8d565b9550506020610c2888828901610bc3565b9450506040610c3988828901610bd8565b9350506060610c4a88828901610bd8565b9250506080610c5b88828901610b8d565b9150509295509295909350565b6000610c7382610ba2565b9150610c7e83610ba2565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610cbd57610cbc6109b9565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610cfa57610cf96109b9565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d3757610d366109b9565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610d7457610d736109b9565b5b82820290509291505056fea26469706673582212208f3224eac5dbefbf48d07cb5c46d803dd12fab9ea888974ac8d65d76a5dbcb2864736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e8146100ff5780639e87a5cd1461012a578063b60d428814610155578063d7b4750c1461015f57610083565b80630343fb251461008d5780633ccfd60b146100ca5780636b69a592146100d457610083565b366100835761008161019c565b005b61008b61019c565b005b34801561009957600080fd5b506100b460048036038101906100af919061082c565b6102bc565b6040516100c19190610872565b60405180910390f35b6100d2610305565b005b3480156100e057600080fd5b506100e96105a0565b6040516100f69190610872565b60405180910390f35b34801561010b57600080fd5b506101146105ad565b604051610121919061089c565b60405180910390f35b34801561013657600080fd5b5061013f6105d5565b60405161014c9190610916565b60405180910390f35b61015d61019c565b005b34801561016b57600080fd5b506101866004803603810190610181919061095d565b6105ff565b604051610193919061089c565b60405180910390f35b6802b5e3af16b18800006101db600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461064690919063ffffffff16565b1015610213576040517f7f20846900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561040d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103c3575b5050505050905060005b81518110156104985760008282815181106104355761043461098a565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610490906109e8565b915050610417565b50600067ffffffffffffffff8111156104b4576104b3610a31565b5b6040519080825280602002602001820160405280156104e25781602001602082028036833780820191505090505b50600090805190602001906104f8929190610722565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161051f90610a91565b60006040518083038185875af1925050503d806000811461055c576040519150601f19603f3d011682016040523d82523d6000602084013e610561565b606091505b505090508061059c576040517fdde7200a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008082815481106106145761061361098a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061065283610682565b90506000670de0b6b3a7640000858361066b9190610aa6565b6106759190610b2f565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106cb57600080fd5b505afa1580156106df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107039190610bed565b5050509150506402540be4008161071a9190610c68565b915050919050565b82805482825590600052602060002090810192821561079b579160200282015b8281111561079a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610742565b5b5090506107a891906107ac565b5090565b5b808211156107c55760008160009055506001016107ad565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107f9826107ce565b9050919050565b610809816107ee565b811461081457600080fd5b50565b60008135905061082681610800565b92915050565b600060208284031215610842576108416107c9565b5b600061085084828501610817565b91505092915050565b6000819050919050565b61086c81610859565b82525050565b60006020820190506108876000830184610863565b92915050565b610896816107ee565b82525050565b60006020820190506108b1600083018461088d565b92915050565b6000819050919050565b60006108dc6108d76108d2846107ce565b6108b7565b6107ce565b9050919050565b60006108ee826108c1565b9050919050565b6000610900826108e3565b9050919050565b610910816108f5565b82525050565b600060208201905061092b6000830184610907565b92915050565b61093a81610859565b811461094557600080fd5b50565b60008135905061095781610931565b92915050565b600060208284031215610973576109726107c9565b5b600061098184828501610948565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109f382610859565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a2657610a256109b9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a7b600083610a60565b9150610a8682610a6b565b600082019050919050565b6000610a9c82610a6e565b9150819050919050565b6000610ab182610859565b9150610abc83610859565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610af557610af46109b9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b3a82610859565b9150610b4583610859565b925082610b5557610b54610b00565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b7f81610b60565b8114610b8a57600080fd5b50565b600081519050610b9c81610b76565b92915050565b6000819050919050565b610bb581610ba2565b8114610bc057600080fd5b50565b600081519050610bd281610bac565b92915050565b600081519050610be781610931565b92915050565b600080600080600060a08688031215610c0957610c086107c9565b5b6000610c1788828901610b8d565b9550506020610c2888828901610bc3565b9450506040610c3988828901610bd8565b9350506060610c4a88828901610bd8565b9250506080610c5b88828901610b8d565b9150509295509295909350565b6000610c7382610ba2565b9150610c7e83610ba2565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610cbd57610cbc6109b9565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610cfa57610cf96109b9565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d3757610d366109b9565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610d7457610d736109b9565b5b82820290509291505056fea26469706673582212208f3224eac5dbefbf48d07cb5c46d803dd12fab9ea888974ac8d65d76a5dbcb2864736f6c63430008080033",
  "devdoc": {
    "author": "Boris Kolev",
    "details": "This implements price feeds as a library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as a library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds the contract"
      }
    },
    "notice": "This contract is to demo a sample fund me contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 75,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}